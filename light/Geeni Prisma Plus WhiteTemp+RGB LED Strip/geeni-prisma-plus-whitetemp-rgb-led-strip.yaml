### Radded's config file for Geeni Prisma Plus WhiteTemp+RGB LED Strip ###
# Table:
# -- ENV: Environment variables
# -- HW: Hardware-specific rules
# -- EXT: ESPHome extensions
# -- NET: Networking / AP / Connectivity
# -- HA: Home Assistant entities

# - ENV: Globals - #
esphome:
  name: "PUT A NAME HERE" # TODO: Fill a name
  friendly_name: "PUT A FRIENDLY NAME HERE" # TODO: Fill a friendly name

# - HW: ESP8266 definitions - #
esp8266:
  board: esp01_1m

# - EXT: Enable logging - #
logger:

# - NET: Enable Home Assistant API - #
api:
  encryption:
    key: "PUT YOUR ENCRYPTION KEY HERE" # TODO: Fill an encryption key

# - NET: Enable OTAs - #
ota:
  - platform: esphome
    password: "PUT YOUR OTA PASSWORD HERE" # TODO: Fill an OTA password

# - NET: Wifi information - #
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # - NET: Fallback hotspot - #
  ap:
    # No SSID means it should match the device name
    password: "PUT YOUR FALLBACK HOTSPOT PASSWORD HERE" # TODO: Fill a fallback hotspot password

captive_portal:

# - HW: Your device config here - #

# - HW: RGBWW outputs - #
output:
  - platform: esp8266_pwm
    id: output_red
    pin: GPIO4
    frequency: 1000 Hz

  - platform: esp8266_pwm
    id: output_green
    pin: GPIO12
    frequency: 1000 Hz

  - platform: esp8266_pwm
    id: output_blue
    pin: GPIO14
    frequency: 1000 Hz

  - platform: esp8266_pwm
    id: output_cold_white
    pin: GPIO5
    frequency: 1000 Hz

  - platform: esp8266_pwm
    id: output_warm_white
    pin: GPIO13
    frequency: 1000 Hz

# - HA: Binary Sensors - #
binary_sensor:
  # - HW: Button on GPIO0 - #
  # This button will be exposed as a Binary Sensor,
  # and will toggle the light when pressed.
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
    name: "Button"
    on_press:
      - light.toggle: main_light

  # - HA: Status - #
  - platform: status
    name: "Status"

# - HA: RGBWW light entity - #
light:
  - platform: rgbww
    id: main_light
    name: None
    red: output_red
    green: output_green
    blue: output_blue
    cold_white: output_cold_white
    warm_white: output_warm_white
    cold_white_color_temperature: 6536 K
    warm_white_color_temperature: 2000 K
    # - EXT: Light effects - #
    effects:
      - pulse:
          name: "Slow pulse"
          transition_length: 10s
          update_interval: 10s
      - pulse:
          name: "Fast pulse"
          transition_length: 2s
          update_interval: 2s
      - flicker:
          name: "Candlelight"
      - flicker:
          name: "Sparkle"
          intensity: 10%
      - lambda:
          name: Rainbow
          update_interval: 3s # If you change this, also have to edit line 11 for correct time handling
          lambda: |-
            static int state = 0;
            static uint32_t time = millis();
            if(millis() - time > 3200){
              ESP_LOGD("main", "Rainbow effect resumed after break!");
              state = 0;
            }
            auto call = id(main_light).turn_on();
            call.set_transition_length(3000);
            switch (state) {
              default:
              case 0: call.set_rgb(1.0, 0.0, 0.0);
                      break;
              case 1: call.set_rgb(1.0, 1.0, 0.0);
                      break;
              case 2: call.set_rgb(0.0, 1.0, 0.0);
                      break;
              case 3: call.set_rgb(0.0, 1.0, 1.0);
                      break;
              case 4: call.set_rgb(0.0, 0.0, 1.0);
                      break;
              case 5: call.set_rgb(1.0, 0.0, 1.0);
                      break;
            }
            call.set_publish(false);
            call.set_save(false);
            call.perform();
            state += 1;
            state %= 6;
            time = millis();

    # - HW: Restore mode - #
    restore_mode: RESTORE_DEFAULT_ON

    # TODO: WLED effect